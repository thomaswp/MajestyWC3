//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MGPL.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MGPLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, NAME=58, NORMALSTRING=59, 
		LONGSTRING=60, INT=61, HEX=62, FLOAT=63, HEX_FLOAT=64, COMMENT=65, LINE_COMMENT=66, 
		WS=67, SHEBANG=68;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_assignment = 3, RULE_if_stat = 4, 
		RULE_stat_or_block = 5, RULE_func_dec = 6, RULE_func_variables = 7, RULE_func_var_dec = 8, 
		RULE_func_body = 9, RULE_type = 10, RULE_attnamelist = 11, RULE_attrib = 12, 
		RULE_laststat = 13, RULE_label = 14, RULE_funcname = 15, RULE_varlist = 16, 
		RULE_namelist = 17, RULE_explist = 18, RULE_exp = 19, RULE_propertyAccessor = 20, 
		RULE_prefixexp = 21, RULE_functioncall = 22, RULE_varOrExp = 23, RULE_var = 24, 
		RULE_varSuffix = 25, RULE_nameAndArgs = 26, RULE_args = 27, RULE_functiondef = 28, 
		RULE_funcbody = 29, RULE_parlist = 30, RULE_tableconstructor = 31, RULE_fieldlist = 32, 
		RULE_field = 33, RULE_fieldsep = 34, RULE_operatorOr = 35, RULE_operatorAnd = 36, 
		RULE_operatorComparison = 37, RULE_operatorStrcat = 38, RULE_operatorAddSub = 39, 
		RULE_operatorMulDivMod = 40, RULE_operatorBitwise = 41, RULE_operatorUnary = 42, 
		RULE_operatorPower = 43, RULE_number = 44, RULE_string = 45;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "assignment", "if_stat", "stat_or_block", "func_dec", 
		"func_variables", "func_var_dec", "func_body", "type", "attnamelist", 
		"attrib", "laststat", "label", "funcname", "varlist", "namelist", "explist", 
		"exp", "propertyAccessor", "prefixexp", "functioncall", "varOrExp", "var", 
		"varSuffix", "nameAndArgs", "args", "functiondef", "funcbody", "parlist", 
		"tableconstructor", "fieldlist", "field", "fieldsep", "operatorOr", "operatorAnd", 
		"operatorComparison", "operatorStrcat", "operatorAddSub", "operatorMulDivMod", 
		"operatorBitwise", "operatorUnary", "operatorPower", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'break'", "'goto'", "'do'", "'end'", "'while'", "'for'", 
		"'='", "','", "'in'", "'if'", "'('", "')'", "'else'", "'begin'", "'function'", 
		"'declare'", "'agent'", "'list'", "'integer'", "'<'", "'>'", "'return'", 
		"'continue'", "'::'", "'.'", "':'", "'nil'", "'false'", "'true'", "'...'", 
		"''s'", "'['", "']'", "'{'", "'}'", "'||'", "'&&'", "'<='", "'>='", "'~='", 
		"'=='", "'..'", "'+'", "'-'", "'*'", "'/'", "'%'", "'//'", "'&'", "'|'", 
		"'~'", "'<<'", "'>>'", "'not'", "'#'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "NAME", "NORMALSTRING", 
		"LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", "COMMENT", "LINE_COMMENT", 
		"WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MGPL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MGPLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MGPLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MGPLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ChunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MGPLParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			block();
			State = 93;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LaststatContext laststat() {
			return GetRuleContext<LaststatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 95;
					stat();
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 25165828L) != 0) {
				{
				State = 101;
				laststat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MGPLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statContext if_stat() {
			return GetRuleContext<If_statContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_decContext func_dec() {
			return GetRuleContext<Func_decContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				varlist();
				State = 105;
				assignment();
				State = 106;
				explist();
				State = 107;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				functioncall();
				State = 110;
				Match(T__0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112;
				label();
				State = 113;
				Match(T__0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 115;
				Match(T__1);
				State = 116;
				Match(T__0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 117;
				Match(T__2);
				State = 118;
				Match(NAME);
				State = 119;
				Match(T__0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 120;
				Match(T__3);
				State = 121;
				block();
				State = 122;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 124;
				Match(T__5);
				State = 125;
				exp(0);
				State = 126;
				Match(T__3);
				State = 127;
				block();
				State = 128;
				Match(T__4);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 130;
				if_stat();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 131;
				Match(T__6);
				State = 132;
				Match(NAME);
				State = 133;
				Match(T__7);
				State = 134;
				exp(0);
				State = 135;
				Match(T__8);
				State = 136;
				exp(0);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 137;
					Match(T__8);
					State = 138;
					exp(0);
					}
				}

				State = 141;
				Match(T__3);
				State = 142;
				block();
				State = 143;
				Match(T__4);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 145;
				Match(T__6);
				State = 146;
				namelist();
				State = 147;
				Match(T__9);
				State = 148;
				explist();
				State = 149;
				Match(T__3);
				State = 150;
				block();
				State = 151;
				Match(T__4);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 153;
				func_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__43 || _la==T__44) {
				{
				State = 156;
				operatorAddSub();
				}
			}

			State = 159;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_or_blockContext[] stat_or_block() {
			return GetRuleContexts<Stat_or_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stat_or_blockContext stat_or_block(int i) {
			return GetRuleContext<Stat_or_blockContext>(i);
		}
		public If_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterIf_stat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitIf_stat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statContext if_stat() {
		If_statContext _localctx = new If_statContext(Context, State);
		EnterRule(_localctx, 8, RULE_if_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(T__10);
			State = 162;
			Match(T__11);
			State = 163;
			exp(0);
			State = 164;
			Match(T__12);
			State = 165;
			stat_or_block();
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 166;
				Match(T__13);
				State = 167;
				stat_or_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_or_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public Stat_or_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_or_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterStat_or_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitStat_or_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_or_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_or_blockContext stat_or_block() {
		Stat_or_blockContext _localctx = new Stat_or_blockContext(Context, State);
		EnterRule(_localctx, 10, RULE_stat_or_block);
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				Match(T__14);
				State = 171;
				block();
				State = 172;
				Match(T__4);
				}
				break;
			case T__1:
			case T__2:
			case T__3:
			case T__5:
			case T__6:
			case T__10:
			case T__11:
			case T__15:
			case T__24:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174;
				stat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MGPLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_variablesContext func_variables() {
			return GetRuleContext<Func_variablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_bodyContext func_body() {
			return GetRuleContext<Func_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public Func_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFunc_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFunc_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_decContext func_dec() {
		Func_decContext _localctx = new Func_decContext(Context, State);
		EnterRule(_localctx, 12, RULE_func_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(T__15);
			State = 178;
			Match(NAME);
			State = 179;
			Match(T__11);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==NAME) {
				{
				State = 180;
				parlist();
				}
			}

			State = 183;
			Match(T__12);
			State = 184;
			func_variables();
			State = 185;
			func_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_variablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_decContext[] func_var_dec() {
			return GetRuleContexts<Func_var_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_decContext func_var_dec(int i) {
			return GetRuleContext<Func_var_decContext>(i);
		}
		public Func_variablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_variables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFunc_variables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFunc_variables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_variables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_variablesContext func_variables() {
		Func_variablesContext _localctx = new Func_variablesContext(Context, State);
		EnterRule(_localctx, 14, RULE_func_variables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__16);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1835008L) != 0) {
				{
				{
				State = 188;
				func_var_dec();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_var_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(MGPLParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(MGPLParser.NAME, i);
		}
		public Func_var_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_var_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFunc_var_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFunc_var_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_var_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_var_decContext func_var_dec() {
		Func_var_decContext _localctx = new Func_var_decContext(Context, State);
		EnterRule(_localctx, 16, RULE_func_var_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			type();
			State = 195;
			Match(NAME);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 196;
				Match(T__8);
				State = 197;
				Match(NAME);
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Func_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFunc_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFunc_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_bodyContext func_body() {
		Func_bodyContext _localctx = new Func_bodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_func_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(T__14);
			State = 206;
			block();
			State = 207;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1835008L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttnamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(MGPLParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(MGPLParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		public AttnamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attnamelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterAttnamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitAttnamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttnamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttnamelistContext attnamelist() {
		AttnamelistContext _localctx = new AttnamelistContext(Context, State);
		EnterRule(_localctx, 22, RULE_attnamelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(NAME);
			State = 212;
			attrib();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 213;
				Match(T__8);
				State = 214;
				Match(NAME);
				State = 215;
				attrib();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MGPLParser.NAME, 0); }
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterAttrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitAttrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 24, RULE_attrib);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 221;
				Match(T__20);
				State = 222;
				Match(NAME);
				State = 223;
				Match(T__21);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LaststatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public LaststatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_laststat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterLaststat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitLaststat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLaststat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LaststatContext laststat() {
		LaststatContext _localctx = new LaststatContext(Context, State);
		EnterRule(_localctx, 26, RULE_laststat);
		int _la;
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				Match(T__22);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 8964326900563985L) != 0) {
					{
					State = 227;
					explist();
					}
				}

				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				Match(T__1);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				Match(T__23);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 232;
					Match(T__0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MGPLParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 28, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(T__24);
			State = 238;
			Match(NAME);
			State = 239;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(MGPLParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(MGPLParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(NAME);
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25) {
				{
				{
				State = 242;
				Match(T__25);
				State = 243;
				Match(NAME);
				}
				}
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 249;
				Match(T__26);
				State = 250;
				Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			var();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 254;
				Match(T__8);
				State = 255;
				var();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(MGPLParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(MGPLParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 34, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(NAME);
			State = 266;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 262;
					Match(T__8);
					State = 263;
					Match(NAME);
					}
					} 
				}
				State = 268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 36, RULE_explist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 269;
					exp(0);
					State = 270;
					Match(T__8);
					}
					} 
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 277;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MGPLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAccessorContext propertyAccessor() {
			return GetRuleContext<PropertyAccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 280;
				Match(T__27);
				}
				break;
			case 2:
				{
				State = 281;
				Match(T__28);
				}
				break;
			case 3:
				{
				State = 282;
				Match(T__29);
				}
				break;
			case 4:
				{
				State = 283;
				number();
				}
				break;
			case 5:
				{
				State = 284;
				@string();
				}
				break;
			case 6:
				{
				State = 285;
				Match(T__30);
				}
				break;
			case 7:
				{
				State = 286;
				functiondef();
				}
				break;
			case 8:
				{
				State = 287;
				prefixexp();
				}
				break;
			case 9:
				{
				State = 288;
				tableconstructor();
				}
				break;
			case 10:
				{
				State = 289;
				operatorUnary();
				State = 290;
				exp(9);
				}
				break;
			case 11:
				{
				State = 292;
				Match(NAME);
				State = 293;
				propertyAccessor();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 330;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 328;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 296;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 297;
						operatorPower();
						State = 298;
						exp(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 300;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 301;
						operatorMulDivMod();
						State = 302;
						exp(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 304;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 305;
						operatorAddSub();
						State = 306;
						exp(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 308;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 309;
						operatorStrcat();
						State = 310;
						exp(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 312;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 313;
						operatorComparison();
						State = 314;
						exp(6);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 316;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 317;
						operatorAnd();
						State = 318;
						exp(5);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 320;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 321;
						operatorOr();
						State = 322;
						exp(4);
						}
						break;
					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 324;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 325;
						operatorBitwise();
						State = 326;
						exp(3);
						}
						break;
					}
					} 
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PropertyAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public PropertyAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterPropertyAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitPropertyAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorContext propertyAccessor() {
		PropertyAccessorContext _localctx = new PropertyAccessorContext(Context, State);
		EnterRule(_localctx, 40, RULE_propertyAccessor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(T__31);
			State = 334;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 42, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			varOrExp();
			State = 340;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 337;
					nameAndArgs();
					}
					} 
				}
				State = 342;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 44, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			varOrExp();
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 344;
				nameAndArgs();
				}
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 1729382291404230656L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(Context, State);
		EnterRule(_localctx, 46, RULE_varOrExp);
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350;
				Match(T__11);
				State = 351;
				exp(0);
				State = 352;
				Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MGPLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 48, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 356;
				Match(NAME);
				}
				break;
			case T__11:
				{
				State = 357;
				Match(T__11);
				State = 358;
				exp(0);
				State = 359;
				Match(T__12);
				State = 360;
				varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 364;
					varSuffix();
					}
					} 
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAccessorContext propertyAccessor() {
			return GetRuleContext<PropertyAccessorContext>(0);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(Context, State);
		EnterRule(_localctx, 50, RULE_varSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
				{
				State = 370;
				Match(T__32);
				State = 371;
				exp(0);
				State = 372;
				Match(T__33);
				}
				break;
			case T__31:
				{
				State = 374;
				propertyAccessor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MGPLParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
		EnterRule(_localctx, 52, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 377;
				Match(T__26);
				State = 378;
				Match(NAME);
				}
			}

			State = 381;
			args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 54, RULE_args);
		int _la;
		try {
			State = 390;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383;
				Match(T__11);
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 8964326900563985L) != 0) {
					{
					State = 384;
					explist();
					}
				}

				State = 387;
				Match(T__12);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				tableconstructor();
				}
				break;
			case NORMALSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 56, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(T__15);
			State = 393;
			funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(T__11);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==NAME) {
				{
				State = 396;
				parlist();
				}
			}

			State = 399;
			Match(T__12);
			State = 400;
			block();
			State = 401;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 60, RULE_parlist);
		int _la;
		try {
			State = 409;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403;
				namelist();
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 404;
					Match(T__8);
					State = 405;
					Match(T__30);
					}
				}

				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				Match(T__30);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 62, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(T__34);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 8964326902661137L) != 0) {
				{
				State = 412;
				fieldlist();
				}
			}

			State = 415;
			Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 64, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			field();
			State = 423;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 418;
					fieldsep();
					State = 419;
					field();
					}
					} 
				}
				State = 425;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__8) {
				{
				State = 426;
				fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MGPLParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 66, RULE_field);
		try {
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429;
				Match(T__32);
				State = 430;
				exp(0);
				State = 431;
				Match(T__33);
				State = 432;
				Match(T__7);
				State = 433;
				exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				Match(NAME);
				State = 436;
				Match(T__7);
				State = 437;
				exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 438;
				exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 68, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 70, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 72, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 74, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8246343499776L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 76, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 78, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			_la = TokenStream.LA(1);
			if ( !(_la==T__43 || _la==T__44) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 80, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1055531162664960L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 82, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 34902897112121344L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 84, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 112625175056351232L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
		EnterRule(_localctx, 86, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(T__56);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MGPLParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(MGPLParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MGPLParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_FLOAT() { return GetToken(MGPLParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 88, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			_la = TokenStream.LA(1);
			if ( !((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 15L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(MGPLParser.NORMALSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGSTRING() { return GetToken(MGPLParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMGPLListener typedListener = listener as IMGPLListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMGPLVisitor<TResult> typedVisitor = visitor as IMGPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 90, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			_la = TokenStream.LA(1);
			if ( !(_la==NORMALSTRING || _la==LONGSTRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,68,466,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,1,5,1,97,8,1,10,1,12,1,100,
		9,1,1,1,3,1,103,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,3,2,140,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,3,2,155,8,2,1,3,3,3,158,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,3,4,169,8,4,1,5,1,5,1,5,1,5,1,5,3,5,176,8,5,1,6,1,6,1,6,1,6,3,
		6,182,8,6,1,6,1,6,1,6,1,6,1,7,1,7,5,7,190,8,7,10,7,12,7,193,9,7,1,8,1,
		8,1,8,1,8,5,8,199,8,8,10,8,12,8,202,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,
		10,1,11,1,11,1,11,1,11,1,11,5,11,217,8,11,10,11,12,11,220,9,11,1,12,1,
		12,1,12,3,12,225,8,12,1,13,1,13,3,13,229,8,13,1,13,1,13,1,13,3,13,234,
		8,13,3,13,236,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,245,8,15,10,
		15,12,15,248,9,15,1,15,1,15,3,15,252,8,15,1,16,1,16,1,16,5,16,257,8,16,
		10,16,12,16,260,9,16,1,17,1,17,1,17,5,17,265,8,17,10,17,12,17,268,9,17,
		1,18,1,18,1,18,5,18,273,8,18,10,18,12,18,276,9,18,1,18,1,18,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,
		295,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,5,19,329,8,19,10,19,12,19,332,9,19,1,20,1,
		20,1,20,1,21,1,21,5,21,339,8,21,10,21,12,21,342,9,21,1,22,1,22,4,22,346,
		8,22,11,22,12,22,347,1,23,1,23,1,23,1,23,1,23,3,23,355,8,23,1,24,1,24,
		1,24,1,24,1,24,1,24,3,24,363,8,24,1,24,5,24,366,8,24,10,24,12,24,369,9,
		24,1,25,1,25,1,25,1,25,1,25,3,25,376,8,25,1,26,1,26,3,26,380,8,26,1,26,
		1,26,1,27,1,27,3,27,386,8,27,1,27,1,27,1,27,3,27,391,8,27,1,28,1,28,1,
		28,1,29,1,29,3,29,398,8,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,3,30,407,
		8,30,1,30,3,30,410,8,30,1,31,1,31,3,31,414,8,31,1,31,1,31,1,32,1,32,1,
		32,1,32,5,32,422,8,32,10,32,12,32,425,9,32,1,32,3,32,428,8,32,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,440,8,33,1,34,1,34,1,35,1,
		35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,
		42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,0,1,38,46,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,0,9,1,0,18,20,2,0,1,1,9,9,2,0,21,
		22,39,42,1,0,44,45,1,0,46,49,1,0,50,54,3,0,45,45,52,52,55,56,1,0,61,64,
		1,0,59,60,485,0,92,1,0,0,0,2,98,1,0,0,0,4,154,1,0,0,0,6,157,1,0,0,0,8,
		161,1,0,0,0,10,175,1,0,0,0,12,177,1,0,0,0,14,187,1,0,0,0,16,194,1,0,0,
		0,18,205,1,0,0,0,20,209,1,0,0,0,22,211,1,0,0,0,24,224,1,0,0,0,26,235,1,
		0,0,0,28,237,1,0,0,0,30,241,1,0,0,0,32,253,1,0,0,0,34,261,1,0,0,0,36,274,
		1,0,0,0,38,294,1,0,0,0,40,333,1,0,0,0,42,336,1,0,0,0,44,343,1,0,0,0,46,
		354,1,0,0,0,48,362,1,0,0,0,50,375,1,0,0,0,52,379,1,0,0,0,54,390,1,0,0,
		0,56,392,1,0,0,0,58,395,1,0,0,0,60,409,1,0,0,0,62,411,1,0,0,0,64,417,1,
		0,0,0,66,439,1,0,0,0,68,441,1,0,0,0,70,443,1,0,0,0,72,445,1,0,0,0,74,447,
		1,0,0,0,76,449,1,0,0,0,78,451,1,0,0,0,80,453,1,0,0,0,82,455,1,0,0,0,84,
		457,1,0,0,0,86,459,1,0,0,0,88,461,1,0,0,0,90,463,1,0,0,0,92,93,3,2,1,0,
		93,94,5,0,0,1,94,1,1,0,0,0,95,97,3,4,2,0,96,95,1,0,0,0,97,100,1,0,0,0,
		98,96,1,0,0,0,98,99,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,101,103,3,26,
		13,0,102,101,1,0,0,0,102,103,1,0,0,0,103,3,1,0,0,0,104,105,3,32,16,0,105,
		106,3,6,3,0,106,107,3,36,18,0,107,108,5,1,0,0,108,155,1,0,0,0,109,110,
		3,44,22,0,110,111,5,1,0,0,111,155,1,0,0,0,112,113,3,28,14,0,113,114,5,
		1,0,0,114,155,1,0,0,0,115,116,5,2,0,0,116,155,5,1,0,0,117,118,5,3,0,0,
		118,119,5,58,0,0,119,155,5,1,0,0,120,121,5,4,0,0,121,122,3,2,1,0,122,123,
		5,5,0,0,123,155,1,0,0,0,124,125,5,6,0,0,125,126,3,38,19,0,126,127,5,4,
		0,0,127,128,3,2,1,0,128,129,5,5,0,0,129,155,1,0,0,0,130,155,3,8,4,0,131,
		132,5,7,0,0,132,133,5,58,0,0,133,134,5,8,0,0,134,135,3,38,19,0,135,136,
		5,9,0,0,136,139,3,38,19,0,137,138,5,9,0,0,138,140,3,38,19,0,139,137,1,
		0,0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,142,5,4,0,0,142,143,3,2,1,0,
		143,144,5,5,0,0,144,155,1,0,0,0,145,146,5,7,0,0,146,147,3,34,17,0,147,
		148,5,10,0,0,148,149,3,36,18,0,149,150,5,4,0,0,150,151,3,2,1,0,151,152,
		5,5,0,0,152,155,1,0,0,0,153,155,3,12,6,0,154,104,1,0,0,0,154,109,1,0,0,
		0,154,112,1,0,0,0,154,115,1,0,0,0,154,117,1,0,0,0,154,120,1,0,0,0,154,
		124,1,0,0,0,154,130,1,0,0,0,154,131,1,0,0,0,154,145,1,0,0,0,154,153,1,
		0,0,0,155,5,1,0,0,0,156,158,3,78,39,0,157,156,1,0,0,0,157,158,1,0,0,0,
		158,159,1,0,0,0,159,160,5,8,0,0,160,7,1,0,0,0,161,162,5,11,0,0,162,163,
		5,12,0,0,163,164,3,38,19,0,164,165,5,13,0,0,165,168,3,10,5,0,166,167,5,
		14,0,0,167,169,3,10,5,0,168,166,1,0,0,0,168,169,1,0,0,0,169,9,1,0,0,0,
		170,171,5,15,0,0,171,172,3,2,1,0,172,173,5,5,0,0,173,176,1,0,0,0,174,176,
		3,4,2,0,175,170,1,0,0,0,175,174,1,0,0,0,176,11,1,0,0,0,177,178,5,16,0,
		0,178,179,5,58,0,0,179,181,5,12,0,0,180,182,3,60,30,0,181,180,1,0,0,0,
		181,182,1,0,0,0,182,183,1,0,0,0,183,184,5,13,0,0,184,185,3,14,7,0,185,
		186,3,18,9,0,186,13,1,0,0,0,187,191,5,17,0,0,188,190,3,16,8,0,189,188,
		1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,15,1,0,0,0,
		193,191,1,0,0,0,194,195,3,20,10,0,195,200,5,58,0,0,196,197,5,9,0,0,197,
		199,5,58,0,0,198,196,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,
		0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,5,1,0,0,204,17,1,0,0,0,205,
		206,5,15,0,0,206,207,3,2,1,0,207,208,5,5,0,0,208,19,1,0,0,0,209,210,7,
		0,0,0,210,21,1,0,0,0,211,212,5,58,0,0,212,218,3,24,12,0,213,214,5,9,0,
		0,214,215,5,58,0,0,215,217,3,24,12,0,216,213,1,0,0,0,217,220,1,0,0,0,218,
		216,1,0,0,0,218,219,1,0,0,0,219,23,1,0,0,0,220,218,1,0,0,0,221,222,5,21,
		0,0,222,223,5,58,0,0,223,225,5,22,0,0,224,221,1,0,0,0,224,225,1,0,0,0,
		225,25,1,0,0,0,226,228,5,23,0,0,227,229,3,36,18,0,228,227,1,0,0,0,228,
		229,1,0,0,0,229,236,1,0,0,0,230,236,5,2,0,0,231,233,5,24,0,0,232,234,5,
		1,0,0,233,232,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,226,1,0,0,0,
		235,230,1,0,0,0,235,231,1,0,0,0,236,27,1,0,0,0,237,238,5,25,0,0,238,239,
		5,58,0,0,239,240,5,25,0,0,240,29,1,0,0,0,241,246,5,58,0,0,242,243,5,26,
		0,0,243,245,5,58,0,0,244,242,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,
		247,1,0,0,0,247,251,1,0,0,0,248,246,1,0,0,0,249,250,5,27,0,0,250,252,5,
		58,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,31,1,0,0,0,253,258,3,48,24,
		0,254,255,5,9,0,0,255,257,3,48,24,0,256,254,1,0,0,0,257,260,1,0,0,0,258,
		256,1,0,0,0,258,259,1,0,0,0,259,33,1,0,0,0,260,258,1,0,0,0,261,266,5,58,
		0,0,262,263,5,9,0,0,263,265,5,58,0,0,264,262,1,0,0,0,265,268,1,0,0,0,266,
		264,1,0,0,0,266,267,1,0,0,0,267,35,1,0,0,0,268,266,1,0,0,0,269,270,3,38,
		19,0,270,271,5,9,0,0,271,273,1,0,0,0,272,269,1,0,0,0,273,276,1,0,0,0,274,
		272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,278,3,
		38,19,0,278,37,1,0,0,0,279,280,6,19,-1,0,280,295,5,28,0,0,281,295,5,29,
		0,0,282,295,5,30,0,0,283,295,3,88,44,0,284,295,3,90,45,0,285,295,5,31,
		0,0,286,295,3,56,28,0,287,295,3,42,21,0,288,295,3,62,31,0,289,290,3,84,
		42,0,290,291,3,38,19,9,291,295,1,0,0,0,292,293,5,58,0,0,293,295,3,40,20,
		0,294,279,1,0,0,0,294,281,1,0,0,0,294,282,1,0,0,0,294,283,1,0,0,0,294,
		284,1,0,0,0,294,285,1,0,0,0,294,286,1,0,0,0,294,287,1,0,0,0,294,288,1,
		0,0,0,294,289,1,0,0,0,294,292,1,0,0,0,295,330,1,0,0,0,296,297,10,10,0,
		0,297,298,3,86,43,0,298,299,3,38,19,10,299,329,1,0,0,0,300,301,10,8,0,
		0,301,302,3,80,40,0,302,303,3,38,19,9,303,329,1,0,0,0,304,305,10,7,0,0,
		305,306,3,78,39,0,306,307,3,38,19,8,307,329,1,0,0,0,308,309,10,6,0,0,309,
		310,3,76,38,0,310,311,3,38,19,6,311,329,1,0,0,0,312,313,10,5,0,0,313,314,
		3,74,37,0,314,315,3,38,19,6,315,329,1,0,0,0,316,317,10,4,0,0,317,318,3,
		72,36,0,318,319,3,38,19,5,319,329,1,0,0,0,320,321,10,3,0,0,321,322,3,70,
		35,0,322,323,3,38,19,4,323,329,1,0,0,0,324,325,10,2,0,0,325,326,3,82,41,
		0,326,327,3,38,19,3,327,329,1,0,0,0,328,296,1,0,0,0,328,300,1,0,0,0,328,
		304,1,0,0,0,328,308,1,0,0,0,328,312,1,0,0,0,328,316,1,0,0,0,328,320,1,
		0,0,0,328,324,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,
		331,39,1,0,0,0,332,330,1,0,0,0,333,334,5,32,0,0,334,335,3,90,45,0,335,
		41,1,0,0,0,336,340,3,46,23,0,337,339,3,52,26,0,338,337,1,0,0,0,339,342,
		1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,43,1,0,0,0,342,340,1,0,0,0,
		343,345,3,46,23,0,344,346,3,52,26,0,345,344,1,0,0,0,346,347,1,0,0,0,347,
		345,1,0,0,0,347,348,1,0,0,0,348,45,1,0,0,0,349,355,3,48,24,0,350,351,5,
		12,0,0,351,352,3,38,19,0,352,353,5,13,0,0,353,355,1,0,0,0,354,349,1,0,
		0,0,354,350,1,0,0,0,355,47,1,0,0,0,356,363,5,58,0,0,357,358,5,12,0,0,358,
		359,3,38,19,0,359,360,5,13,0,0,360,361,3,50,25,0,361,363,1,0,0,0,362,356,
		1,0,0,0,362,357,1,0,0,0,363,367,1,0,0,0,364,366,3,50,25,0,365,364,1,0,
		0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,49,1,0,0,0,369,
		367,1,0,0,0,370,371,5,33,0,0,371,372,3,38,19,0,372,373,5,34,0,0,373,376,
		1,0,0,0,374,376,3,40,20,0,375,370,1,0,0,0,375,374,1,0,0,0,376,51,1,0,0,
		0,377,378,5,27,0,0,378,380,5,58,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,
		381,1,0,0,0,381,382,3,54,27,0,382,53,1,0,0,0,383,385,5,12,0,0,384,386,
		3,36,18,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,391,5,13,
		0,0,388,391,3,62,31,0,389,391,3,90,45,0,390,383,1,0,0,0,390,388,1,0,0,
		0,390,389,1,0,0,0,391,55,1,0,0,0,392,393,5,16,0,0,393,394,3,58,29,0,394,
		57,1,0,0,0,395,397,5,12,0,0,396,398,3,60,30,0,397,396,1,0,0,0,397,398,
		1,0,0,0,398,399,1,0,0,0,399,400,5,13,0,0,400,401,3,2,1,0,401,402,5,5,0,
		0,402,59,1,0,0,0,403,406,3,34,17,0,404,405,5,9,0,0,405,407,5,31,0,0,406,
		404,1,0,0,0,406,407,1,0,0,0,407,410,1,0,0,0,408,410,5,31,0,0,409,403,1,
		0,0,0,409,408,1,0,0,0,410,61,1,0,0,0,411,413,5,35,0,0,412,414,3,64,32,
		0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,416,5,36,0,0,416,
		63,1,0,0,0,417,423,3,66,33,0,418,419,3,68,34,0,419,420,3,66,33,0,420,422,
		1,0,0,0,421,418,1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,
		0,424,427,1,0,0,0,425,423,1,0,0,0,426,428,3,68,34,0,427,426,1,0,0,0,427,
		428,1,0,0,0,428,65,1,0,0,0,429,430,5,33,0,0,430,431,3,38,19,0,431,432,
		5,34,0,0,432,433,5,8,0,0,433,434,3,38,19,0,434,440,1,0,0,0,435,436,5,58,
		0,0,436,437,5,8,0,0,437,440,3,38,19,0,438,440,3,38,19,0,439,429,1,0,0,
		0,439,435,1,0,0,0,439,438,1,0,0,0,440,67,1,0,0,0,441,442,7,1,0,0,442,69,
		1,0,0,0,443,444,5,37,0,0,444,71,1,0,0,0,445,446,5,38,0,0,446,73,1,0,0,
		0,447,448,7,2,0,0,448,75,1,0,0,0,449,450,5,43,0,0,450,77,1,0,0,0,451,452,
		7,3,0,0,452,79,1,0,0,0,453,454,7,4,0,0,454,81,1,0,0,0,455,456,7,5,0,0,
		456,83,1,0,0,0,457,458,7,6,0,0,458,85,1,0,0,0,459,460,5,57,0,0,460,87,
		1,0,0,0,461,462,7,7,0,0,462,89,1,0,0,0,463,464,7,8,0,0,464,91,1,0,0,0,
		39,98,102,139,154,157,168,175,181,191,200,218,224,228,233,235,246,251,
		258,266,274,294,328,330,340,347,354,362,367,375,379,385,390,397,406,409,
		413,423,427,439
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
